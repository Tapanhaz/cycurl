# -*- coding: utf-8 -*-
import asyncio


async def main():
    with open("./consts.pxi", "wb") as fconsts:
        fconsts.write(
            b"# This file is generated by generate_cyconst.py, do not modify it directly.\n\n"
        )
        fconsts.write(b"from cycurl cimport curl\n")

        fconsts.write(b"#CURLOPT_\n")
        proc = await asyncio.create_subprocess_shell(
            """ echo '#include "curl/curl.h"' | gcc -E - | grep -i "CURLOPT_.\+ =" | sed "s/,//g" """,
            stdout=asyncio.subprocess.PIPE,
        )
        stdout, _ = await proc.communicate()
        for line in stdout.splitlines():
            idx = line.index(b"=")
            name = line[:idx].strip()
            fconsts.write(name + b" = curl." + name + b"\n")
        with open("curl/curl.h", "rb") as f1:
            for l in f1.readlines():
                if l.startswith(b"#define CURLOPT_"):
                    name = l.split()[1].strip()
                    fconsts.write(name + b" = curl." + name + b"\n")

        fconsts.write(b"#CURLINFO_\n")
        proc = await asyncio.create_subprocess_shell(
            """ echo '#include "curl/curl.h"' | gcc -E - | grep -i "CURLINFO_.\+" | sed "s/,//g" """,
            stdout=asyncio.subprocess.PIPE,
        )
        stdout, _ = await proc.communicate()
        for line in stdout.splitlines():
            try:
                idx = line.index(b"=")
                name = line[:idx].strip()
            except ValueError:
                name = line.strip()
            fconsts.write(name + b" = curl." + name + b"\n")

        fconsts.write(b"#CURLMOPT_\n")
        proc = await asyncio.create_subprocess_shell(
            """ echo '#include "curl/curl.h"' | gcc -E - | grep -i "CURLMOPT_.\+ =" | sed "s/,//g" """,
            stdout=asyncio.subprocess.PIPE,
        )
        stdout, _ = await proc.communicate()
        for line in stdout.splitlines():
            idx = line.index(b"=")
            name = line[:idx].strip()
            fconsts.write(name + b" = curl." + name + b"\n")

        fconsts.write(b"#CURLE_\n")
        proc = await asyncio.create_subprocess_shell(
            """ echo '#include "curl/curl.h"' | gcc -E - | grep -i "CURLE_.\+" | sed "s/,//g" """,
            stdout=asyncio.subprocess.PIPE,
        )
        stdout, _ = await proc.communicate()
        for line in stdout.splitlines():
            try:
                idx = line.index(b"=")
                name = line[:idx].strip()
            except ValueError:
                name = line.strip()
            fconsts.write(name + b" = curl." + name + b"\n")
        with open("curl/curl.h", "rb") as f1:
            for l in f1.readlines():
                if l.startswith(b"#define CURLE_"):
                    name = l.split()[1].strip()
                    fconsts.write(name + b" = curl." + name + b"\n")

        fconsts.write(b"#CURL_HTTP_VERSION_\n")
        proc = await asyncio.create_subprocess_shell(
            """ echo '#include "curl/curl.h"' | gcc -E - | grep -i "CURL_HTTP_VERSION_.\+" | sed "s/,//g" """,
            stdout=asyncio.subprocess.PIPE,
        )
        stdout, _ = await proc.communicate()
        for line in stdout.splitlines():
            try:
                idx = line.index(b"=")
                name = line[:idx].strip()
            except ValueError:
                name = line.strip()
            fconsts.write(name + b" = curl." + name + b"\n")

        fconsts.write(b"#CURLWS_\n")
        with open("curl/websockets.h", "rb") as f1:
            for l in f1.readlines():
                if l.startswith(b"#define CURLWS_"):
                    name = l.split()[1].strip()
                    fconsts.write(name + b" = curl." + name + b"\n")

        fconsts.write(b"#CURL_SSLVERSION_\n")
        proc = await asyncio.create_subprocess_shell(
            """ echo '#include "curl/curl.h"' | gcc -E - | grep -i "CURL_SSLVERSION_.\+" | sed "s/,//g" """,
            stdout=asyncio.subprocess.PIPE,
        )
        stdout, _ = await proc.communicate()
        for line in stdout.splitlines():
            try:
                idx = line.index(b"=")
                name = line[:idx].strip()
            except ValueError:
                name = line.strip()
            fconsts.write(name + b" = curl." + name + b"\n")

        fconsts.write(b"#CURLAUTH_\n")
        with open("curl/curl.h", "rb") as f1:
            for l in f1.readlines():
                if l.startswith(b"#define CURLAUTH_"):
                    name = l.split()[1].strip()
                    fconsts.write(name + b" = curl." + name + b"\n")

        fconsts.write(b"#CURLSSH_AUTH_\n")
        with open("curl/curl.h", "rb") as f1:
            for l in f1.readlines():
                if l.startswith(b"#define CURLSSH_AUTH_"):
                    name = l.split()[1].strip()
                    fconsts.write(name + b" = curl." + name + b"\n")
        fconsts.write(b"CURL_ERROR_SIZE = curl.CURL_ERROR_SIZE\n")

        fconsts.write(b"#CURL_WRITEFUNC_\n")
        with open("curl/curl.h", "rb") as f1:
            for l in f1.readlines():
                if l.startswith(b"#define CURL_WRITEFUNC_"):
                    name = l.split()[1].strip()
                    fconsts.write(name + b" = curl." + name + b"\n")

        fconsts.write(b"#CURL_POLL_\n")
        with open("curl/multi.h", "rb") as f1:
            for l in f1.readlines():
                if l.startswith(b"#define CURL_POLL_"):
                    name = l.split()[1].strip()
                    fconsts.write(name + b" = curl." + name + b"\n")
                elif l.startswith(b"#define CURL_CSELECT_"):
                    name = l.split()[1].strip()
                    fconsts.write(name + b" = curl." + name + b"\n")
        fconsts.write(b"CURL_SOCKET_TIMEOUT = curl.CURL_SOCKET_TIMEOUT\n")
        fconsts.write(b"CURL_SOCKET_BAD = curl.CURL_SOCKET_BAD\n")

        fconsts.write(b"#CURLMSG_\n")
        proc = await asyncio.create_subprocess_shell(
            """ echo '#include "curl/multi.h"' | gcc -E - | grep -i "CURLMSG_.\+" | sed "s/,//g" """,
            stdout=asyncio.subprocess.PIPE,
        )
        stdout, _ = await proc.communicate()
        for line in stdout.splitlines():
            try:
                idx = line.index(b"=")
                name = line[:idx].strip()
            except ValueError:
                name = line.strip()
            fconsts.write(name + b" = curl." + name + b"\n")


if __name__ == "__main__":
    asyncio.run(main())
